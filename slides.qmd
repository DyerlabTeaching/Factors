---
title: "Factors"
subtitle: "Defining Categorical Types"
author: Rodney Dyer, PhD
format: revealjs
execute:
  echo: true
---

## Topics Covered

In this *brief* presentation, we'll be introducing the following items:

- Factor Data Types
- The {{< fa cat >}} {{< fa cat >}} {{< fa cat >}} {{< fa cat >}} library
- Workflows & Pipes
- Tables

# Categorical Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}


## Categorical Data Types


&nbsp;

::::{.columns}

:::{.column width="50%"}
Unique and individual grouping that can be applied to a study design.  

- Case sensitive  
- Can be ordinal  
- Typically defined as `character` type
:::


:::{.column width="50%"}
```{r}
weekdays <- c("Monday","Tuesday","Wednesday",
              "Thursday","Friday","Saturday", 
              "Sunday")
class( weekdays )
weekdays
```
:::


::::




## Making Up Data 🤷🏻‍

The function `sample()` allows us to take a random sample of elements from a vector of potential values.  


```{r}
chooseOne <- sample( c("Heads","Tails"), size=1 )
chooseOne
```


## Making Up More Data 🤷🏻‍ {.smaller}

However, if we want a large number items, we can have them with or without replacement.

```{r}
sample( c("Heads","Tails"), size=10, replace=TRUE )
```




## Weekdays as example 

We'll pretend we have a bunch of data related to the day of the week.

```{r}
days <- sample( weekdays, size=40, replace=TRUE)
summary( days )
days
```



## Turn it into a `factor`

```{r}
data <- factor( days )
is.factor( data )
class( data )
```


## Data Type Specific Printing & Summaries


```{r}
data
```



## Factor Levels

Each factor variable is defined by the `levels` that constitute the data.  This is a .red[finite] set of unique values

```{r}
levels( data)
```



# Ordinal Categorical Data {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}




## Factor Ordination

If a factor is not ordinal, it does nota allow the use relational comparison operators.

```{r}
#| warning: true
data[1] < data[2]
```

## Ordination = Ordered

```{r}
is.ordered( data )
```



## Ordination of Factors {.smaller}

:::: {.columns}

::: {.column width="50%"}
Where ordination matters:

- Fertilizer Treatments in KG of N<sub>2</sub> per hectare: 10 kg N<sub>2</sub>, 20 N<sub>2</sub>, 30 N<sub>2</sub>,  

- Days of the Week: `Friday` is not followed by `Monday`,   

- Life History Stage: seed, seedling, juvenile, adult, etc.
:::

::: {.column width="50%"}
::: {.fragment}
Where ordination is irrelevant:

- River   

- State or Region   

- Sample Location  
:::
:::

::::


## Making Ordered Factors




```{r}
data <- factor( days, ordered = TRUE)
is.ordered( data )
```



:::{.fragment}
```{r}
data
```

The problem is that the default ordering is actually *alphabetical!*
:::



## Specifying the Order

Specifying the Order of Ordinal Factors



```{r}
data <- factor( days, ordered = TRUE, levels = weekdays)
data
```

::: {.fragment}
<center><img src="https://media.giphy.com/media/KEYbcgR8oKQzwpwvLU/giphy-downsized-large.gif?cid=ecf05e47pagn8g10iwyysc86x07tgew8evhr1dbkahub7cuu&rid=giphy-downsized-large.gif&ct=g" height=200></center>

:::


## Sorting Is Now Relevant

```{r}
sort( data )
```




## Fixed Set of Levels

You cannot assign a value to a factor that is not one of the pre-defined levels.

```{r}
#| error: true
#| warning: true
data[3] <- "Bob"
```





# `forcats` <br/> {{< fa cat >}} {{< fa cat >}} {{< fa cat >}} {{< fa cat >}} {background-color="black" background-image="media/contour.png" background-size="initial" background-position="right"}




## The `forcats` library

Part of the `tidyverse` group of packages.

```{r}
library( tidyverse )
library(forcats)
```

This library has a lot of helper functions that make working with factors a bit easier.  I'm going to give you a few examples here but **strongly** encourage you to look a the cheat sheet for all the other options.


## StarWars API

There is a StarWars API at [https://swapi.py4e.com](https://swapi.py4e.com), see `?starwars` to learn more about the data it contains.  Let's take this data to play with the {{< fa cat >}}{{< fa cat >}}{{< fa cat >}}{{< fa cat >}} library.

&nbsp;

```{r}
names(starwars)
```


## Homeworld as Factor {.smaller}

```{r}
starwars |>
  filter( !is.na(homeworld), !is.na(mass) ) |>
  mutate( homeworld = factor( homeworld ) ) -> df
df$homeworld
```

## Homeworld as Ordered {.smaller}


```{r}
starwars |>
  filter( !is.na(homeworld), !is.na(mass) ) |>
  mutate( homeworld = factor( homeworld, ordered=TRUE ) ) -> df
df$homeworld
```

## Visualizing Counts of Levels {.smaller}

```{r}
df |> 
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```


## Occurrence Based Order In `data.frame` {.smaller}

```{r}
df |> 
  mutate( homeworld = fct_inorder( homeworld ) ) |> 
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```

## Reordering By Other Valiable {.smaller}


```{r}
df |> 
  mutate( homeworld = fct_reorder( homeworld, mass )) |> 
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```




## Frequency Based Ordering {.smaller}

```{r}
df |> 
  mutate( homeworld = fct_infreq( homeworld ) ) |> 
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```

## Reversing Orders {.smaller}

```{r}
df |> 
  mutate( homeworld = fct_rev( fct_infreq( homeworld ) ) ) |> 
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```

## Recoding Factors {.smaller}

*New Value* = *Old Value*

```{r}
starwars |> 
  filter( !is.na(homeworld) ) |>
  mutate( homeworld = fct_recode(homeworld, 
                                 "Homeworld of Zolander" = "Zolan",
                                 "Outter Rim Territory Tund" = "Tund"
  ) ) |>
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```


## Collapsing A Few Selected Levels {.smaller}

```{r}
starwars |>
  filter( !is.na(homeworld) ) |>
  mutate( homeworld = fct_collapse( homeworld, 
                                    "<---- MEH ---->" = c("Bestine IV","Cerea", "Dorin","Miral", "Sullust"),
                                    "¯\\_(ツ)_/¯" = c("Umbara","Kashyyyk","Concord Dawn"),
                                    "YES YES YES YES YSE YSE " = c("Nal Hutta","Ojom","Rodia","Ryloth","Serenno","Shili","Skako","Socorro")
  )) |>
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```


## Lumping Based On Counts {.smaller}

```{r}
starwars |> 
  filter( !is.na(homeworld) ) |>
  mutate( homeworld = fct_lump_min(homeworld, 2)) |>
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```

## Lumping into N Groups {.smaller}

```{r}
starwars |>
  filter( !is.na(homeworld) ) |>
  mutate( homeworld = fct_lump_n(homeworld, n=5)) |>
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```



## Counting Factors & Occurances

```{r}
starwars |> 
  filter( !is.na(homeworld) ) |> 
  group_by( homeworld ) |> 
  summarize( film = length(unique(films) ) ) |> 
  arrange( -film )
```



## Anonymizing Factor Levels


```{r}
starwars |>
  filter( !is.na(homeworld) ) |> 
  mutate( homeworld = fct_anon( fct_lump( homeworld, n=6 ) ) ) |>
  ggplot( aes(x=homeworld) ) + 
  geom_bar() + 
  coord_flip()
```


## Questions

::: {layout-ncol="2"}
If you have any questions, please feel free to either post them as an "Issue" on your copy of this GitHub Repository, post to the [Canvas](https://canvas.vcu.edu) discussion board for the class, or drop me an [email](mailto://rjdyer@vcu.edu).

![](media/peter_sellers.gif){.middle fig-alt="Peter Sellers looking bored" fig-align="center" width="500"}
:::
